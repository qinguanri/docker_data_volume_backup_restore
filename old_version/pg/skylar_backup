#!/bin/bash
#########################
#  author: Qin Guanri
#  date  : 2016-12-14
#########################

VERSION="1.0.0"
BACKUP_BASE_DIR="/backup/container_pg"
BACKUP_FILE=""
DIRRECTORY=""                       # the relative directory path of backup files. 
RESERVE_SIZE=5                      # reserve space size GB

PG_DUMP_FILE="/var/lib/postgresql/dump.sql"
PG_CONF=`find -P /var/lib/postgresql -name "postgresql.conf"`
PG_AUTO_CONF=`find -P /var/lib/postgresql -name "postgresql.auto.conf"`
PG_IDENT_CONF=`find -P /var/lib/postgresql -name "pg_ident.conf"`
PG_HBA_CONF=`find -P /var/lib/postgresql -name "pg_hba.conf"`


usage() {
    echo "
Backup pg data without stopping service.

usage:

docker exec pg backup [options]

the most commonly options are:
-f  file            backup data to the specify file. default is: /backup/container_main/<timestamp>.tar. 
                    e.g: -f /backup/container_main/20161201000000.tar

-r  reservespace    the reserve space size (unit GBytes). Backup will return error
                    if there is not enough reserve space. default is 5GB. e.g: -r 10

-V                  show version.
-h                  show this usage.

example:
docker exec pg backup
"
    exit 0
}

## skylar_log <level> <content>
skylar_log() {
    echo "$2"
    echo  "`date` $1 $2" >> /var/log/skylar_backup_restore.log
}

check_args_valid() {
    if [ "$BACKUP_FILE" == "" ]; then
        datetime=`date "+%Y%m%d%H%M%S"`
        BACKUP_FILE="$BACKUP_BASE_DIR/$datetime"".tar"
    fi

    FILE=`basename $BACKUP_FILE`
    echo "$FILE" | grep -q '^[a-zA-Z0-9\.]\+$' >>/dev/null
    if [ $? -ne 0 ]; then
        skylar_log "ERROR" "Invalid name of backupfile: $BACKUP_FILE"
        exit 1
    fi

    echo "$BACKUP_FILE" | grep '.tar' >>/dev/null
    if [ $? -ne 0 ]; then
        skylar_log "ERROR" "Invalid name of backupfile: $BACKUP_FILE"
        exit 1
    fi

    echo "$BACKUP_FILE" | grep '/backup/container_pg' >>/dev/null
    if [ $? -ne 0 ]; then
        skylar_log "ERROR" "Invalid name of backupfile: $BACKUP_FILE"
        exit 1
    fi

    if [ -f $BACKUP_FILE ]; then
        skylar_log "ERROR" "$BACKUP_FILE is exist."
        exit 1
    fi
}

create_backup_dir() {
    [ ! -d "$BACKUP_BASE_DIR" ] && mkdir -p $BACKUP_BASE_DIR

    if [ "$DIRRECTORY" == "" ]; then
        DIRRECTORY=`date "+%Y%m%d%H%M%S"`
    fi
}


## check_space $need_size. unit Bytes. return 0 or 1
check_space() {
    skylar_log "INFO" "==> check space ..."

    need_size=0
    if [ "$1" != "" ]; then
        need_size=$1
    fi

    cd /
    total_free_size=`df | grep '/dev/mapper/docker' | awk '{print $4}'`
    df | grep '/etc/hosts' >>/dev/null
    if [ $? -eq 0 ]; then
        total_free_size=`df | grep '/dev/mapper/docker' | awk '{print $4}'`
    fi

    let total_free_size=$total_free_size*1024
    let free_size=$total_free_size-$need_size
    let reserve_bytes=$RESERVE_SIZE*1024*1024

    let total_free_size_MB=$total_free_size/1024/1024
    let need_size_MB=$need_size/1024/1024
    let free_size_MB=$free_size/1024/1024
    let reserve_size_MB=$reserve_bytes/1024/1024

    skylar_log "INFO" "==> compute space size ..."
    skylar_log "INFO" "total_free_size=$total_free_size_MB MBytes."
    skylar_log "INFO" "need_size=$need_size_MB MBytes."
    skylar_log "INFO" "free_size=$free_size_MB MBytes."
    skylar_log "INFO" "reserve_size=$reserve_size_MB MBytes."
    if [ $free_size -lt $reserve_bytes ]; then
        return 1
    fi

    return 0
}

backup_pg() {
    skylar_log "INFO" "==> start to backup dump file ..."

    supervisorctl status postgres | grep 'RUNNING' >>/dev/null
    if [ $? -ne 0 ]; then
        skylar_log "WARN" "WARN. postgres is not RUNNING. starting pg."

        kill -9 $(ps -ef | grep postgres | awk {'print $2'})
        supervisorctl start postgres
    fi

    # assume that dump.sql is 2GB
    dump_file_size=2000000000
    check_space $dump_file_size
    if [ $? -ne 0 ]; then
        skylar_log "ERROR" "ERROR. There is not enough space to dump."
        return 1
    fi

    create_backup_dir

    skylar_log "INFO" "==> pg_dumpall > $PG_DUMP_FILE ..."
    su postgres -c "pg_dumpall > $PG_DUMP_FILE"
    if [ $? -ne 0 ]; then
        skylar_log "ERROR" "ERROR. failed while execute command: pg_dumpall."
        return 1
    fi

    cd $BACKUP_BASE_DIR
    rm -f dump.sql postgresql.conf pg_hba.conf postgresql.auto.conf pg_ident.conf
    mv -f $PG_DUMP_FILE $BACKUP_BASE_DIR
    cp -f $PG_CONF $BACKUP_BASE_DIR
    cp -f $PG_HBA_CONF $BACKUP_BASE_DIR
    cp -f $PG_AUTO_CONF $BACKUP_BASE_DIR
    cp -f $PG_IDENT_CONF $BACKUP_BASE_DIR
    tar cvf $BACKUP_FILE dump.sql postgresql.conf pg_hba.conf postgresql.auto.conf pg_ident.conf
    rm -f dump.sql postgresql.conf pg_hba.conf postgresql.auto.conf pg_ident.conf

    return 0
}

main() {
    if ! check_args_valid; then
        exit 1
    fi

    backup_pg

    if [ $? -eq 0 ]; then
        skylar_log "INFO" "Done."
        exit 0
    else
        skylar_log "ERROR" "Failed."
        exit 1
    fi
}

args=`getopt "f:r:hV" $*`
if [ $? -ne 0 ]
then
    usage
fi

set -- $args
for i in $*
do
    case "$i" in
    -f) BACKUP_FILE=$2; shift 2;;
    -r) RESERVE_SIZE=$2; shift 2;;
    -h) usage;;
    -V) echo "version $VERSION"; exit 0;;
    -\?) usage;;
    --) shift; break;;
    esac
done

#### main
main
