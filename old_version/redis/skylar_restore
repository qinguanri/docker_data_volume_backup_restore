#!/bin/bash
#########################
#  author: Qin Guanri
#  date  : 2016-12-14
#########################

VERSION="1.0.0"
BACKUP_BASE_DIR="/backup/container_redis"
DIRRECTORY=""                       # the relative directory path of backup files. 
RESERVE_SIZE=5                      # reserve space size, unit GB
INDEX=""

REDIS_AOF_FILE="/var/lib/redis/appendonly.aof"
REDIS_AOF_FILE_OLD="/var/lib/redis/appendonly.aof.old"

BACKUP_FILE=""
AOF_FILE=""

REDIS_CLI=`which redis-cli`

usage() {
    echo "
usage:

docker exec redis restore [options]

the most commonly options are:
-i  index       restore with a directory by index. 
                default is by index, and index=1. e.g: -i 2

-d  directory   restore by a specify directory. Notice that It will use 
                index if '-i' is not empty. e.g: -d uuid_1234567890

-h              show this usage.     

example:
docker exec redis restore
"
    exit 0
}


## skylar_log <level> <content>
skylar_log() {
    echo "$2"
    echo  "`date` $1 $2" >> /var/log/skylar_backup_restore.log
}

## check_space $need_size. return 0 or 1
check_space() {
    need_size=0
    if [ "$1" != "" ] && [ "$1" -gt 0 ]; then
        need_size=$1
    else
        skylar_log "ERROR" "ERROR. get an invalid aof file size."
        return 1
    fi

    cd /
    total_free_size=`df | grep '/dev/mapper/docker' | awk '{print $4}'`
    let total_free_size=$total_free_size*1024
    let free_size=$total_free_size-$need_size
    let reserve_bytes=$RESERVE_SIZE*1024*1024

    let total_free_size_MB=$total_free_size/1024/1024
    let need_size_MB=$need_size/1024/1024
    let free_size_MB=$free_size/1024/1024
    let reserve_size_MB=$reserve_bytes/1024/1024

    skylar_log "INFO" "==> compute space size ..."
    skylar_log "INFO" "total_free_size=$total_free_size_MB MBytes."
    skylar_log "INFO" "need_size=$need_size_MB MBytes."
    skylar_log "INFO" "free_size=$free_size_MB MBytes."
    skylar_log "INFO" "reserve_size=$reserve_size_MB MBytes."

    if [ $free_size -lt $reserve_bytes ]; then
        return 1
    fi

    return 0
}


check_backup_file() {
    ## try to use index at first.
    if [ "$INDEX" != "" ] && [ "$INDEX" -gt 0 ]; then
        cd $BACKUP_BASE_DIR
        FILE=`ls -lt | sed '1d' | sed -n "$INDEX p" | awk '{print $9}'`
        if [ ! -f "$FILE" ]; then
            skylar_log "ERROR" "ERROR. get an invalid index:$INDEX."
            return 1
        fi
        BACKUP_FILE=$BACKUP_BASE_DIR/$FILE
    fi

    if [ "$BACKUP_FILE" == "" ] && [ "$INDEX" == "" ]; then
        if [ ! -d $BACKUP_BASE_DIR ]; then
            skylar_log "ERROR" "ERROR. cannot find directory $BACKUP_BASE_DIR."
            return 1
        fi
        cd $BACKUP_BASE_DIR

        FILE=`ls -lt | sed '1d' | head -1 | awk '{print $9}'`
        if [ ! -f "$FILE" ]; then
            skylar_log "ERROR" "ERROR. Backup directory is empty."
            return 1
        fi
        BACKUP_FILE=$BACKUP_BASE_DIR/$FILE
    fi
    if [ ! -f "$BACKUP_FILE" ]; then
        skylar_log "ERROR" "cannot find file:$BACKUP_FILE"
        return 1
    fi

    size=`ls -l $BACKUP_FILE | awk '{print $5}'`
    check_space $size
    if [ $? -ne 0 ]; then
        skylar_log "ERROR" "ERROR. There is not enough reserve space to restore. reserve size is $RESERVE_SIZE GB."
        return 1
    fi

    [ -d $BACKUP_BASE_DIR/tmp ] && rm -rf $BACKUP_BASE_DIR/tmp
    mkdir -p $BACKUP_BASE_DIR/tmp
    cd $BACKUP_BASE_DIR
    tar xvf $BACKUP_FILE -C $BACKUP_BASE_DIR/tmp >>/dev/null

    AOF_FILE=`find -P $BACKUP_BASE_DIR/tmp -name "appendonly.aof"`

    if [ ! -f "$AOF_FILE" ]; then
        skylar_log "ERROR" "cannot find files:$AOF_FILE."
        rm -rf $BACKUP_BASE_DIR/tmp
        return 1
    fi

    return 0
}

restore_aof() {
    skylar_log "INFO" "==> start to restore redis ..."

    # step 0. check backup files.
    if ! check_backup_file; then
        exit 1
    fi

    # step 1. stop redis
    skylar_log "INFO" "==> supervisorctl stop redis ..."
    supervisorctl stop redis
    ps -ef | grep redis-server >>/dev/null
    if [ $? -eq 0 ]; then
        kill -9 $(ps -ef | grep redis-server | grep 6379 | awk '{print $2}') >>/dev/null
    fi

    # step 2. restore aof
    skylar_log "INFO" "==> $AOF_FILE will be used to restore ..."

    cp $REDIS_AOF_FILE $REDIS_AOF_FILE_OLD
    cp $AOF_FILE $REDIS_AOF_FILE
    
    # step 3. succeed or rollback.
    skylar_log "INFO" "==> supervisorctl start redis ..."
    if ! supervisorctl start redis; then
        skylar_log "ERROR" "ERROR. supervisorctl start redis failed. rollback and restart redis ..."
        mv $REDIS_AOF_FILE_OLD $REDIS_AOF_FILE
        supervisorctl restart redis
        rm -rf $BACKUP_BASE_DIR/tmp
        return 1
    fi

    rm -rf $BACKUP_BASE_DIR/tmp
    rm -f $REDIS_AOF_FILE_OLD
    return 0
}

main() {
    restore_aof

    if [ $? -eq 0 ]; then
        skylar_log "INFO" "Done."
        exit 0
    else
        skylar_log "ERROR" "Failed."
        exit 1
    fi
}


args=`getopt "i:f:hV" $*`
if [ $? -ne 0 ]
then
    usage
fi

set -- $args
for i in $*
do
    case "$i" in
    -i) INDEX=$2; shift 2;;
    -f) BACKUP_FILE=$2; shift 2;;
    -h) usage;;
    -V) echo "version $VERSION"; exit 0;;
    -\?) usage;;
    --) shift; break;;
    esac
done

#### main
main
