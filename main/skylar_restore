#!/bin/bash
#########################
#  author: Qin Guanri
#  date  : 2016-12-14
#########################

VERSION="1.0.0"
BACKUP_BASE_DIR="/backup/container_main"
DIRRECTORY=""                       # the relative directory path of backup files. 
RESERVE_SIZE=5                      # reserve space size, unit GB
INDEX=""

BACKUP_FILE=""
SKYLARMINIDE_DIR="/opt/tools/skylarminide"

usage() {
    echo "
usage:

docker exec -it main bash restore [options]

the most commonly options are:
-i  index       restore with a directory by index. 
                default is by index, and index=1. e.g: -i 2

-d  directory   restore by a specify directory. Notice that It will use 
                index if '-i' is not empty. e.g: -d uuid_1234567890

-h              show this usage.     

example:
docker exec -it main bash restore
"
    exit 0
}


## check_space $need_size. return 0 or 1
check_space() {
    need_size=0
    if [ "$1" != "" ] && [ "$1" -gt 0 ]; then
        need_size=$1
    else
        echo "ERROR. get an invalid aof file size."
        return 1
    fi

    cd /
    total_free_size=`df | grep '/dev/mapper/docker' | awk '{print $4}'`
    let total_free_size=$total_free_size*1024
    let free_size=$total_free_size-$need_size
    let reserve_bytes=$RESERVE_SIZE*1024*1024

    let total_free_size_MB=$total_free_size/1024/1024
    let need_size_MB=$need_size/1024/1024
    let free_size_MB=$free_size/1024/1024
    let reserve_size_MB=$reserve_bytes/1024/1024

    echo "==> compute space size ..."
    echo "total_free_size=$total_free_size_MB MBytes."
    echo "need_size=$need_size_MB MBytes."
    echo "free_size=$free_size_MB MBytes."
    echo "reserve_size=$reserve_size_MB MBytes."

    if [ $free_size -lt $reserve_bytes ]; then
        return 1
    fi

    return 0
}


restore_skylarminide() {
    echo "==> start to restore skylarminide ..."

    ## try to use index at first.
    if [ "$INDEX" != "" ] && [ "$INDEX" -gt 0 ]; then
        DIRRECTORY=`ls -lt | sed '1d' | sed -n "$INDEXp" | awk '{print $9}'`
        if [ "$DIRRECTORY" == "" ]; then
            echo "ERROR. get an invalid index:$INDEX."
            return 1
        fi
    fi

    if [ "$DIRRECTORY" == "" ] && [ "$INDEX" == "" ]; then
        if [ ! -d $BACKUP_BASE_DIR ]; then
            echo "ERROR. cannot find directory $BACKUP_BASE_DIR."
            return 1
        fi
        cd $BACKUP_BASE_DIR
        DIRRECTORY=`ls -lt | sed '1d' | head -1 | awk '{print $9}'`
        if [ "$DIRRECTORY" == "" ]; then
            echo "ERROR. Backup directory is empty."
            return 1
        fi
    fi

    BACKUP_FILE="$BACKUP_BASE_DIR/$DIRRECTORY/data.tar.gz"
    if [ ! -e $BACKUP_FILE ]; then
        echo "ERROR. cannot find backup file: $BACKUP_FILE"
        return 1
    fi

    echo "==> $BACKUP_FILE will be used to restore ..."

    need_size=`ls -l $BACKUP_FILE | awk '{print $5}'`
    check_space $need_size
    if [ $? -ne 0 ]; then
        echo "ERROR. There is not enough reserve space to restore. reserve size is $RESERVE_SIZE GB."
        return 1
    fi

    if [ ! -d $SKYLARMINIDE_DIR ]; then
        echo "ERROR. cannot find $SKYLARMINIDE_DIR."
        return 1
    fi

    echo "==> supervisorctl stop skylarminide ..."
    supervisorctl stop skylarminide

    echo "==> mv $SKYLARMINIDE_DIR/data $SKYLARMINIDE_DIR/data_old ..."
    cp -rf $SKYLARMINIDE_DIR/data $SKYLARMINIDE_DIR/data_old
    rm -rf $SKYLARMINIDE_DIR/data 2>&1 >/dev/null

    echo "mv and tar $BACKUP_FILE"
    mv $BACKUP_FILE $SKYLARMINIDE_DIR
    tar xzvf $SKYLARMINIDE_DIR/data.tar.gz >> /dev/null

    echo "==> supervisorctl start skylarminide ..."
    supervisorctl start skylarminide

    if [ $? -ne 0 ]; then
        echo "ERROR. supervisorctl start skylarminide failed. rollback."
        supervisorctl stop skylarminide
        rm -rf $SKYLARMINIDE_DIR/data
        mv $SKYLARMINIDE_DIR/data_old $SKYLARMINIDE_DIR/data
        supervisorctl start skylarminide
        return 1
    fi

    rm -rf $SKYLARMINIDE_DIR/data_old
    return 0
}


main() {
    restore_skylarminide

    if [ $? -eq 0 ]; then
        echo "Done."
        exit 0
    else
        echo "Failed."
        exit 1
    fi
}


args=`getopt "i:d:hV" $*`
if [ $? -ne 0 ]
then
    usage
fi

set -- $args
for i in $*
do
    case "$i" in
    -i) INDEX=$2; shift 2;;
    -d) DIRRECTORY=$2; shift 2;;
    -h) usage;;
    -V) echo "version $VERSION"; exit 0;;
    -\?) usage;;
    --) shift; break;;
    esac
done

#### main
main
