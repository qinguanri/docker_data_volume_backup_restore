#!/bin/bash
#########################
#  author: Qin Guanri
#  date  : 2016-12-14
#########################

VERSION="1.0.0"

LOG_FILE="/var/log/skylar_backup_restore.log"
# usage: log_info <log_content>
log_info()  { _log "INFO" "$1" }
log_warn()  { _log "WARN" "$1" }
log_error() { _log "ERROR" "$1" }
_log() { echo "$2"; echo "`date` $1 $2" >> $LOG_FILE }

usage() {
    echo "
Scripts used to backup or restore a container's data. version: $VERSION

usage:

sky <command> [options]

the most commonly commands and options are:

list                 
    list all backup files at current container.
            
cleanup [-a|-i index|-f file]           
    clean up backup files at current container. clean up all by default.
    -a          : cleanup all backup files. 
    -i index    : cleanup a backup file specify by index. e.g: -i 2
    -f file     : cleanup a backup file specify by absolut file path. 
                  e.g: -f /backup/container_redis/20161225000000.tar

backup [-f file]            
    create a backup files at current container. 
    -f file     : create a backup file and its absolut path is specify by 'file'.
    default is backup file name by timestamp.


restore [-i index|-f file]     
    restore with a backup file at current container
    -i index    : resotre with a backup file specify by index.
    -f file     : resotre with a backup file specify by file path.
    default is restore by index and index=1.

version|-V|--version
    show the version.

help|-h|--help        
    show this usage.

examples:
1. sky list 
2. sky clean
3. sky clean -a
4. sky backup -f /backup/container_redis/uuid_123.tar
5. sky bakup
6. sky restore -i 2

At the same time, you can see logfile at $LOG_FILE.

This script is placed in container's directory: /usr/local/bin/.
If you want to execute script outside container, the command would be:
docker exec <container_name> sky backup
"
    exit 0
}

# which kind of container
CONTAINER_NAME=""
if [ -d "/opt/tools/openresty/nginx" ]; then
    CONTAINER_NAME="main"
elif [ -d "/var/lib/redis" ]; then
    CONTAINER_NAME="redis"
elif [ -d "/var/lib/postgresql" ]; then
    CONTAINER_NAME="pg"
else
    log_error "unexpected container."
    exit 1
fi

# global var
BACKUP_BASE_DIR="/backup/container_$CONTAINER_NAME"
BACKUP_FILE=""
INDEX=""
RESERVE_SIZE=5   # unit GB

#/////////////////////////////////////////////////
# global var for container 'main'
if [ "$CONTAINER_NAME" == "main" ]; then 
    SKYLARMINIDE_DIR="/opt/tools/skylarminide"
fi

#/////////////////////////////////////////////////
# global var for container 'redis'
if [ "$CONTAINER_NAME" == "redis" ]; then
    REDIS_AOF_FILE="/var/lib/redis/appendonly.aof"
    REDIS_AOF_FILE_OLD="/var/lib/redis/appendonly.aof.old"

    BACKUP_FILE=""
    AOF_FILE=""
    REDIS_RDB_FILE="/var/lib/redis/dump.rdb"
    REDIS_CONF_FILE="/var/lib/redis/redis.conf"

    REDIS_CLI=`which redis-cli`
fi

#////////////////////////////////////////////////
# global var for container 'postgresql'
if [ "$CONTAINER_NAME" == "pg" ]; then
    INITDB_BIN=`find -P /usr/lib/postgresql/ -name "initdb"`
    PG_CTL_BIN=`find -P /usr/lib/postgresql/ -name "pg_ctl"`
    PG_VER=`ls -l /var/lib/postgresql`
    if [ "$PG_VER" == "" ]; then
        log_error "unexpected postgresql version:$PG_VER"
        exit 1
    fi

    PG_DATA_DIR="/var/lib/postgresql/$PG_VER/main"
    PG_DATA_OLD="/var/lib/postgresql/$PG_VER/main_old"

    PG_DUMP_FILE="/var/lib/postgresql/dump.sql"
    PG_CONF=`find -P /var/lib/postgresql -name "postgresql.conf"`
    PG_AUTO_CONF=`find -P /var/lib/postgresql -name "postgresql.auto.conf"`
    PG_IDENT_CONF=`find -P /var/lib/postgresql -name "pg_ident.conf"`
    PG_HBA_CONF=`find -P /var/lib/postgresql -name "pg_hba.conf"`

fi

## check_space $need_size. unit MBytes. 
## return 0 if free space is enough, else return 1.
check_space() {
    log_info "==> check space ..."
    need_size=0
    if [ "$1" -gt 0 ]; then
        need_size=$1
    fi

    cd /
    total_free_size=`df | grep '/dev/mapper/docker' | awk '{print $4}'`
    df | grep '/etc/hosts' >>/dev/null
    if [ $? -eq 0 ]; then
        total_free_size=`df | grep '/dev/mapper/docker' | awk '{print $4}'`
    fi

    let total_free_size=$total_free_size/1024  # MB
    let free_size=$total_free_size-$need_size  # MB
    let reserve_size=$RESERVE_SIZE*1024        # MB

    log_info "==> compute space size ..."
    log_info "total_free_size=$total_free_size MBytes."
    log_info "need_size=$need_size MBytes."
    log_info "free_size=$free_size MBytes."
    log_info "reserve_size=$reserve_bytes MBytes."

    if [ $free_size -lt $reserve_size ]; then
        log_error "There is not enough reserve space. \
                  Reserve size is $RESERVE_SIZE GB." 
        return 1
    fi

    return 0
}

cmd_list() {
    printf "%5s %10s %20s %20s\n" "index" "size" "createtime" "directory" 
    if [ ! -d $BACKUP_BASE_DIR ]; then
        exit 0
    fi

    cd $BACKUP_BASE_DIR
    ls -lth --time-style="+%Y-%m-%d %H:%M:%S" | sed '1d' | \
    awk '{printf("%5d %10s %9s%9s %s/%s\n", NR, $5, $6, $7, $CONTAINER_NAME, $8)}'
}

# usage: cmd_cleanup [-a|-i index|-f file] 
cmd_cleanup() {
    if [ "$BACKUP_BASE_DIR" == "*" ] || 
       [ "$BACKUP_BASE_DIR" == "" ]; then
        log_error "ERROR. Backup directory is invalid. \
                  BACKUP_BASE_DIR=$BACKUP_BASE_DIR"
        return 1
    fi

    log_info "==> clean all backup directories ..."
    rm -rf $BACKUP_BASE_DIR
}

# usage: cmd_backup [-f file]
cmd_backup() {
    log_info "==> begin to backup $CONTAINER_NAME ..."
    if [ $# -eq 0 ]; then
        BACKUP_FILE="$BACKUP_BASE_DIR/`date +%Y%m%d%H%M%S`"
    elif [ $# -eq 2 ] && [ "$1" == "-f" ]; then
        BACKUP_FILE="$2"
    fi

    FILE=`basename $BACKUP_FILE`

    basename "$BACKUP_FILE" | grep -q '^/backup/[a-zA-Z0-9\.]\+.tar$' >>/dev/null
    if [ $? -ne 0 ]; then
        log_error "Invalid argumnets. backupfile: $BACKUP_FILE"
        return 1
    fi

    if [ -f $BACKUP_FILE ]; then
        log_error "Invalid argumnets. $BACKUP_FILE is already exist."
        return 1
    fi

    [ ! -d $BACKUP_BASE_DIR ] && mkdir -p "$BACKUP_BASE_DIR"

    case "$CONTAINER_NAME" in
        main)   backup_main;ret_code=$?;;
        redis)  backup_redis;ret_code=$?;;
        pg)     backup_pg;ret_code=$?;;
        *)      log_error "unexpected container name";exit 1;;
    esac
    return $ret_code
}

backup_main() {
    if [ ! -d "$SKYLARMINIDE_DIR/data" ]; then
        log_error "ERROR. No such file or directory: $SKYLARMINIDE_DIR/data."
        return 1
    fi

    log_info "==> supervisorctl stop skylarminide ..."
    supervisorctl stop skylarminide

    # check space before backup. 1GB
    [ ! check_space 1000 ] && return 1

    # BACKUP_FILE="/backup/container_main/xxxxx.tar"
    # SOURCE=/opt/tools/skylarminide/data
    log_info "==> backup data to $BACKUP_FILE ..."
    cd $SKYLARMINIDE_DIR && tar cvf $BACKUP_FILE data

    log_info "==> supervisorctl start skylarminide ..."
    supervisorctl start skylarminide
}

backup_redis() {
    [ ! -f $REDIS_AOF_FILE ] && $REDIS_CLI bgrewriteaof

    if [ ! -f $REDIS_AOF_FILE ]; then
        log_error "ERROR. No such file or directory: $REDIS_AOF_FILE."
        return 1
    fi

    aof_size=`ls -l $REDIS_AOF_FILE | awk '{print $5}'`
    let aof_size＝$aof_size/1024/1024
    [ ! check_space $aof_size ] && return 1

    cp -f $REDIS_AOF_FILE $BACKUP_BASE_DIR
    cp -f $REDIS_RDB_FILE $BACKUP_BASE_DIR
    cp -f $REDIS_CONF_FILE $BACKUP_BASE_DIR

    cd $BACKUP_BASE_DIR && \
    tar cvf $BACKUP_FILE \
        appendonly.aof \
        dump.rdb \
        redis.conf --remove-files
}

backup_pg() {
    [ ! supervisorctl status postgres ] && supervisorctl start postgres

    # todo:I guess need 2GB space to tar dump.sql here
    [ ! check_space 2000 ] && return 1

    log_info "==> pg_dumpall > $PG_DUMP_FILE ..."
    [ ! su postgres -c "pg_dumpall > $PG_DUMP_FILE" ] && return 1

    
    mv -f $PG_DUMP_FILE $BACKUP_BASE_DIR
    cp -f $PG_CONF $BACKUP_BASE_DIR
    cp -f $PG_HBA_CONF $BACKUP_BASE_DIR
    cp -f $PG_AUTO_CONF $BACKUP_BASE_DIR
    cp -f $PG_IDENT_CONF $BACKUP_BASE_DIR
    cd $BACKUP_BASE_DIR && 
    tar cvf $BACKUP_FILE \
        dump.sql \
        postgresql.conf \
        pg_hba.conf \
        postgresql.auto.conf \
        pg_ident.conf --remove-files

    return 0
}

# restore [-i index|-f file]
cmd_restore() {
    log_info "==> begin to restore $CONTAINER_NAME ..."
    if [ $# -eq 0 ]; then
        INDEX=1
    elif [ $# -eq 2 ]; then
        case "$1" in
            -i)  INDEX="$2";;
            -f)  BACKUP_FILE="$2";;
        esac
    fi

    if [ "$INDEX" -gt 0 ]; then
        cd $BACKUP_BASE_DIR
        FILE=`ls -lt | sed '1d' | sed -n "$INDEX p" | awk '{print $9}'`
        BACKUP_FILE="$BACKUP_BASE_DIR/$FILE"
    fi

    if [ ! -f "$BACKUP_FILE" ]; then
        log_error "No such file or directory: $BACKUP_FILE."
        return 1
    fi

    size=`ls -l $BACKUP_FILE | awk '{print $5}'`
    let size=$size/1024/1024
    [ ! check_space $size ] && return 1
    
    [ -d $BACKUP_BASE_DIR/tmp ] && rm -rf $BACKUP_BASE_DIR/tmp
    mkdir -p $BACKUP_BASE_DIR/tmp
    
    cd $BACKUP_BASE_DIR && \
    tar xvf $BACKUP_FILE -C $BACKUP_BASE_DIR/tmp >>/dev/null

    case "$CONTAINER_NAME" in
        main)           restore_main;ret_code=$?;;
        redis)          restore_redis;ret_code=$?;;
        pg)             restore_pg;ret_code=$?;;
        *)              log_error "unexpected container name";exit 1;
    esac

    [ -d "$BACKUP_BASE_DIR/tmp" ] && rm -rf $BACKUP_BASE_DIR/tmp
    return $ret_code
}

restore_main() {
    SKYLARMINIDE_TMP_DIR="$BACKUP_BASE_DIR/tmp/data"
    if [ ! -d "$SKYLARMINIDE_TMP_DIR" ]; then
        log_error "No such file or directory: $SKYLARMINIDE_TMP_DIR"
        return 1
    fi

    if [ ! -d $SKYLARMINIDE_DIR ]; then
        log_error "ERROR. cannot find $SKYLARMINIDE_DIR."
        return 1
    fi

    log_info "==> supervisorctl stop skylarminide ..."
    supervisorctl stop skylarminide

    log_info "==> mv $SKYLARMINIDE_DIR/data $SKYLARMINIDE_DIR/data_old ..."
    cp -rf $SKYLARMINIDE_DIR/data $SKYLARMINIDE_DIR/data_old
    rm -rf $SKYLARMINIDE_DIR/data 2>&1 >/dev/null

    log_info "copy $SKYLARMINIDE_TMP_DIR to $SKYLARMINIDE_DIR ..."
    [ ! -d $SKYLARMINIDE_DIR/data ] && mkdir -p $SKYLARMINIDE_DIR/data
    cp -rf SKYLARMINIDE_TMP_DIR/* $SKYLARMINIDE_DIR/data/
    
    log_info "==> supervisorctl start skylarminide ..."
    if ! supervisorctl start skylarminide; then
        log_error "ERROR. supervisorctl start skylarminide failed. rollback ..."
        supervisorctl stop skylarminide
        rm -rf $SKYLARMINIDE_DIR/data
        [ ! -d $SKYLARMINIDE_DIR/data ] && mkdir -p $SKYLARMINIDE_DIR/data
        cp -rf $SKYLARMINIDE_DIR/data_old/* $SKYLARMINIDE_DIR/data/
        rm -rf $SKYLARMINIDE_DIR/data_old
        supervisorctl start skylarminide
        return 1
    fi

    rm -rf $BACKUP_BASE_DIR/tmp
    rm -rf $SKYLARMINIDE_DIR/data_old
    return 0
}

restore_redis() {
    # step 0. check files
    AOF_FILE=`find -P $BACKUP_BASE_DIR/tmp -name "appendonly.aof"`

    if [ ! -f "$AOF_FILE" ]; then
        log_error "No such file or directory:$AOF_FILE."
        rm -rf $BACKUP_BASE_DIR/tmp
        return 1
    fi

    # step 1. stop redis
    log_info "==> supervisorctl stop redis ..."
    supervisorctl stop redis
    [ ps -ef | grep redis-server ] && \
    kill -9 $(ps -ef | grep redis-server | grep 6379 | awk '{print $2}')

    # step 2. restore aof
    log_info "==> $AOF_FILE will be used to restore ..."

    mv $REDIS_AOF_FILE $REDIS_AOF_FILE_OLD
    mv $AOF_FILE $REDIS_AOF_FILE

    # step 3. succeed or rollback.
    log_info "==> supervisorctl start redis ..."
    if ! supervisorctl start redis; then
        log_error "ERROR. supervisorctl start redis failed. rollback ..."
        mv $REDIS_AOF_FILE_OLD $REDIS_AOF_FILE
        supervisorctl restart redis
        rm -rf $BACKUP_BASE_DIR/tmp
        return 1
    fi

    rm -rf $BACKUP_BASE_DIR/tmp
    rm -f $REDIS_AOF_FILE_OLD
    return 0
}

restore_pg() {
    # step 0. check backup files valid
    PG_DUMP_FILE=`find -P $BACKUP_BASE_DIR/tmp -name "dump.sql"`
    PG_CONF_FILE=`find -P $BACKUP_BASE_DIR/tmp -name "postgresql.conf"`
    PG_HBA_CONF=`find -P $BACKUP_BASE_DIR/tmp -name "pg_hba.conf"`
    PG_AUTO_CONF=`find -P $BACKUP_BASE_DIR/tmp -name "postgresql.auto.conf"`
    PG_IDENT_CONF=`find -P $BACKUP_BASE_DIR/tmp -name "pg_ident.conf"`

    if [ ! -f "$PG_DUMP_FILE" ] || 
       [ ! -f "$PG_CONF_FILE" ] || 
       [ ! -f "$PG_HBA_CONF" ]; then
        log_error "No such file or directory:$PG_DUMP_FILE or \
                  $PG_CONF_FILE or $PG_HBA_CONF."
        return 1
    fi

    # step 1. stop pg
    log_info "==> stop pg ..."
    supervisorctl stop postgres >>/dev/null
    [ ps -ef | grep postgres ] && kill -9 $(ps -ef | grep postgres | awk {'print $2'})

    # step 2. backup old data to tmp
    log_info "==> backup $PG_DATA_DIR to $PG_DATA_OLD ..."
    [ -d $PG_DATA_OLD ] && rm -rf $PG_DATA_OLD
    ## cannot move directly. so we copy then remove.
    cp -rf $PG_DATA_DIR $PG_DATA_OLD
    rm -rf $PG_DATA_DIR

    # step 3. create new db
    log_info "==> create new db ..."
    mkdir -p "$PG_DATA_DIR"
    chown -R postgres:postgres $PG_DATA_DIR
    chmod -R 700 $PG_DATA_DIR

    su postgres -c "$INITDB_BIN -D $PG_DATA_DIR"
    sleep 5
    su postgres -c "$PGCTL_BIN -D $PG_DATA_DIR -l logfile stop"
    supervisorctl stop postgres
    [ ps -ef | grep postgres] && \
    kill -9 $(ps -ef | grep postgres | awk {'print $2'})
    
    ### restore config files
    cp $PG_CONF_FILE $PG_DATA_DIR
    cp $PG_HBA_CONF $PG_DATA_DIR
    cp $PG_IDENT_CONF $PG_DATA_DIR
    cp $PG_AUTO_CONF $PG_DATA_DIR

    # step 4. import dump.sql
    supervisorctl start postgres
    su postgres -c "psql -f $PG_DUMP_FILE 2>&1" >>/dev/null
    rm -rf $BACKUP_BASE_DIR/tmp

    # step 5. succeed or rollback.
    if ! supervisorctl status postgres; then
        skylar_log "ERROR" "restore failed. rollback ..."
        [ -d $PG_DATA_DIR ] && rm -rf $PG_DATA_DIR
        mv $PG_DATA_OLD $PG_DATA_DIR

        supervisorctl stop postgres
        kill -9 $(ps -ef | grep postgres | awk {'print $2'})
        supervisorctl start postgres
        return 1
    fi

    rm -rf $PG_DATA_OLD
}

# What kind of command ？
case "$1" in
    list)           cmd_list $@;;
    cleanup)        cmd_cleanup $@;;
    backup)         cmd_backup $@;;
    restore)        cmd_restore $@;; 
    version|-V|--version)    echo "version: $VERSION";;
    help|usage|-h|--help)    usage;;
    *)                       usage;;
esac

if [ $? -eq 0 ]; then
    log_info "Done."
    exit 0
else
    log_error "Failed."
    exit 1
fi
